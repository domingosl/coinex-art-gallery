{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAa,IAAI,E,WAAAC,YACjBC,EAAQ,IAAIJ,EAAAK,MAEZC,EAAS,IAAIN,EAAAO,kBACf,GACAC,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAKEC,EAAW,IAAIX,EAAAY,cAAoB,CACrCC,OAAQC,SAASC,cAAc,gBAC/BC,OAAO,EACPC,WAAW,IAMf,SAASC,IACL,MAAML,EAASF,EAASQ,WAGlBC,EAAQP,EAAOQ,YACfC,EAAST,EAAOU,aAGlBV,EAAOO,QAAUA,GAASP,EAAOS,SAAWA,IAE5CX,EAASa,QAAQJ,EAAOE,GAAQ,GAChChB,EAAOmB,OAASL,EAAQE,EACxBhB,EAAOoB,yB,CAMf,IAAIC,EArBJhB,EAASiB,UAAUC,SAAU,EAC7BlB,EAASiB,UAAUE,KAAO9B,EAAA+B,iBAqB1B7B,EAAW8B,KACP,+BACA,SAAUC,GACNN,EAAaM,EAAKC,MAGlB9B,EAAM+B,IAAIR,GACVT,G,IAEHkB,IAAD,IAGCC,IACGC,QAAQC,IAAIF,EAAM,IAI1B/B,EAAOkC,SAASC,KAAK,KACrBnC,EAAOkC,SAASE,KAAK,IAErBlC,OAAOmC,iBAAiB,SAAUzB,GAA2B,GAE7DA,IAEA,SAAS0B,IACLC,sBAAsBD,GAEtBjB,IAAaA,EAAWmB,SAASC,GAAK,KAAQC,KAAKC,KAAI,IAAIC,MAAOC,UAAY,MAE9ExC,EAASyC,OAAOhD,EAAOE,E,CAG3BsC","sources":["client_src/js/main.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nconst gltfLoader = new GLTFLoader();\nconst scene = new THREE.Scene();\n\nconst camera = new THREE.PerspectiveCamera(\n    50,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n);\n\n\n\nconst renderer = new THREE.WebGLRenderer({\n    canvas: document.querySelector(\"#litle-verse\"),\n    alpha: true,\n    antialias: true\n});\n\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\nfunction resizeCanvasToDisplaySize() {\n    const canvas = renderer.domElement;\n\n    // look up the size the canvas is being displayed\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    // adjust displayBuffer size to match\n    if (canvas.width !== width || canvas.height !== height) {\n        // you must pass false here or three.js sadly fights the browser\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n\n        // update any render target sizes here\n    }\n}\n\nlet isoGallery;\ngltfLoader.load(\n    \"assets/gallery-2/scene.gltf\",\n    function (gltf) {\n        isoGallery = gltf.scene;\n        //isoGallery.rotation.x = 0.5;\n        //isoGallery.rotation.y = 3.1;\n        scene.add(isoGallery);\n        resizeCanvasToDisplaySize();\n    },\n    (xhr) => {\n        //console.log((xhr.loaded / xhr.total) * 100 + '% loaded');\n    },\n    (error) => {\n        console.log(error);\n    }\n);\n\ncamera.position.setZ(160);\ncamera.position.setY(50);\n\nwindow.addEventListener(\"resize\", resizeCanvasToDisplaySize, false);\n\nresizeCanvasToDisplaySize();\n\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    isoGallery ? isoGallery.rotation.y += 0.003 * Math.sin(new Date().getTime() / 10000) : null;\n\n    renderer.render(scene, camera);\n}\n\nanimate();"],"names":["$ilwiq","parcelRequire","$6e383a9e562c4f19$var$gltfLoader","GLTFLoader","$6e383a9e562c4f19$var$scene","Scene","$6e383a9e562c4f19$var$camera","PerspectiveCamera","window","innerWidth","innerHeight","$6e383a9e562c4f19$var$renderer","WebGLRenderer","canvas","document","querySelector","alpha","antialias","$6e383a9e562c4f19$var$resizeCanvasToDisplaySize","domElement","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","$6e383a9e562c4f19$var$isoGallery","shadowMap","enabled","type","PCFSoftShadowMap","load","gltf","scene","add","xhr","error","console","log","position","setZ","setY","addEventListener","$6e383a9e562c4f19$var$animate","requestAnimationFrame","rotation","y","Math","sin","Date","getTime","render"],"version":3,"file":"index.83cceb8e.js.map"}