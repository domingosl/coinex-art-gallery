{"mappings":"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","sources":["client_src/js/gallery.js","node_modules/three/examples/jsm/webxr/VRButton.js","node_modules/three/examples/jsm/webxr/XRControllerModelFactory.js","node_modules/three/examples/jsm/libs/motion-controllers.module.js","node_modules/three/examples/jsm/webxr/XRHandModelFactory.js","node_modules/three/examples/jsm/webxr/XRHandPrimitiveModel.js","node_modules/three/examples/jsm/webxr/XRHandMeshModel.js","client_src/js/controllers.js"],"sourcesContent":["require('dotenv').config();\n\nimport Web3 from 'web3';\nimport abi from '../../contracts/abi.json';\n\nconst loader = require('../js/blocking-loader');\nconst galleriesPresets = require('../js/galleries-presets');\nconst controllers = require('./controllers');\n\nconst { displayPainting, clearPaintings } = require('../js/display-paintings');\n\nlet gallery;\nlet web3;\nlet contract;\n\nconst contractAddrReg = new RegExp('^0x[a-fA-F0-9]{40}$');\n\nconst queryParams = new Proxy(new URLSearchParams(window.location.search), {\n    get: (searchParams, prop) => searchParams.get(prop),\n});\n\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';\n\nconst gltfLoader = new GLTFLoader();\nconst scene = new THREE.Scene();\nlet camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n);\n\nconst cameraGroup = new THREE.Group();\ncameraGroup.add(camera);\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\n\nrenderer.shadowMap.enabled = true;\n\nscene.background = new THREE.Color(135, 206, 235);\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\nrenderer.xr.enabled = true;\n\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\n\nwindow.init3d = (id) => new Promise((resolve, reject) => {\n\n    const galleryPreset = galleriesPresets.findById(id);\n\n    console.log(\"Gallery Preset\", galleryPreset);\n\n    gltfLoader.load(\n        galleryPreset.location,\n        async function (gltf) {\n\n            gallery = gltf.scene;\n            gallery.scale.set(galleryPreset.scene.scale, galleryPreset.scene.scale, galleryPreset.scene.scale);\n            gallery.position.set(\n                galleryPreset.scene.position.x,\n                galleryPreset.scene.position.y,\n                galleryPreset.scene.position.z);\n\n            camera.fov = (galleryPreset.camera.fov);\n            camera.updateProjectionMatrix();\n\n            camera.position.set(\n                galleryPreset.camera.position.x,\n                galleryPreset.camera.position.y,\n                galleryPreset.camera.position.z\n            );\n\n            if(typeof galleryPreset.postRenderModifier === 'function')\n                await galleryPreset.postRenderModifier(gallery);\n\n            scene.add(gallery);\n            scene.add(cameraGroup);\n\n\n            renderer.xr.addEventListener('sessionstart', function () {\n                //scene.position.z -= 2;\n                controllers.load(renderer, cameraGroup);\n            });\n\n            window.addEventListener('resize', onWindowResize, false);\n            onWindowResize();\n\n            //const controls = new OrbitControls(camera, renderer.domElement)\n\n            renderer.setAnimationLoop(function () {\n                renderer.render( scene, camera );\n                //controls.update();\n            });\n\n            resolve();\n\n        },\n        () => {},\n        (error) => {\n            console.log(error);\n            reject();\n        });\n\n    document.body.appendChild(renderer.domElement);\n    document.body.appendChild(VRButton.createButton(renderer));\n\n\n});\n\nwindow.loadGallery = async () => {\n\n    if(!contractAddrReg.test(queryParams.g) && (queryParams.g !== 'example'))\n        return alert(\"Invalid Gallery Address!\");\n\n    web3 = new Web3(process.env.COINEX_NET_RPC_URL);\n\n    contract = new web3.eth.Contract(abi, queryParams.g === 'example' ? process.env.GALLERY_EXAMPLE_1 : queryParams.g);\n\n    loader.show();\n\n    const galleryIndex = parseInt(await contract.methods.getGalleryIndex().call());\n\n    const paintings = await contract.methods.getPaintings().call();\n\n    console.log(\"Paintings\", paintings);\n\n    await init3d(galleryIndex);\n\n    for(const painting in paintings) {\n        displayPainting(\n            gallery,\n            paintings[painting].posX,\n            paintings[painting].posY,\n            paintings[painting].posZ,\n            paintings[painting].rotX,\n            paintings[painting].rotY,\n            paintings[painting].rotZ,\n            paintings[painting].width,\n            paintings[painting].aspect,\n            paintings[painting].url\n        );\n    }\n\n    loader.hide();\n\n};\n\nloadGallery();","class VRButton {\n\n\tstatic createButton( renderer ) {\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t\t\t// be requested separately.)\n\n\t\t\t\t\tconst sessionInit = { optionalFeatures: [ 'local-floor', 'bounded-floor', 'hand-tracking', 'layers' ] };\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction showVRNotAllowed( exception ) {\n\n\t\t\tdisableButton();\n\n\t\t\tconsole.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n\t\t\tbutton.textContent = 'VR NOT ALLOWED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t\tif ( supported && VRButton.xrSessionIsGranted ) {\n\n\t\t\t\t\tbutton.click();\n\n\t\t\t\t}\n\n\t\t\t} ).catch( showVRNotAllowed );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n\tstatic xrSessionIsGranted = false;\n\n\tstatic registerSessionGrantedListener() {\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\t// WebXRViewer (based on Firefox) has a bug where addEventListener\n\t\t\t// throws a silent exception and aborts execution entirely.\n\t\t\tif ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n\t\t\tnavigator.xr.addEventListener( 'sessiongranted', () => {\n\n\t\t\t\tVRButton.xrSessionIsGranted = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nVRButton.registerSessionGrantedListener();\n\nexport { VRButton };\n","import {\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tSphereGeometry,\n} from 'three';\n\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nimport {\n\tConstants as MotionControllerConstants,\n\tfetchProfile,\n\tMotionController\n} from '../libs/motion-controllers.module.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t}\n\n\tsetEnvironmentMap( envMap ) {\n\n\t\tif ( this.envMap == envMap ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.envMap = envMap;\n\t\tthis.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = this.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Polls data from the XRInputSource and updates the model's components to match\n\t * the real world data\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( ! this.motionController ) return;\n\n\t\t// Cause the MotionController to poll the Gamepad for data\n\t\tthis.motionController.updateFromGamepad();\n\n\t\t// Update the 3D model to reflect the button, thumbstick, and touchpad state\n\t\tObject.values( this.motionController.components ).forEach( ( component ) => {\n\n\t\t\t// Update node data based on the visual responses' current states\n\t\t\tObject.values( component.visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\t\tconst { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n\n\t\t\t\t// Skip if the visual response node is not found. No error is needed,\n\t\t\t\t// because it will have been reported at load time.\n\t\t\t\tif ( ! valueNode ) return;\n\n\t\t\t\t// Calculate the new properties based on the weight supplied\n\t\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY ) {\n\n\t\t\t\t\tvalueNode.visible = value;\n\n\t\t\t\t} else if ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\t\tvalueNode.quaternion.slerpQuaternions(\n\t\t\t\t\t\tminNode.quaternion,\n\t\t\t\t\t\tmaxNode.quaternion,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t\tvalueNode.position.lerpVectors(\n\t\t\t\t\t\tminNode.position,\n\t\t\t\t\t\tmaxNode.position,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes( motionController, scene ) {\n\n\t// Loop through the components and find the nodes needed for each components' visual responses\n\tObject.values( motionController.components ).forEach( ( component ) => {\n\n\t\tconst { type, touchPointNodeName, visualResponses } = component;\n\n\t\tif ( type === MotionControllerConstants.ComponentType.TOUCHPAD ) {\n\n\t\t\tcomponent.touchPointNode = scene.getObjectByName( touchPointNodeName );\n\t\t\tif ( component.touchPointNode ) {\n\n\t\t\t\t// Attach a touch dot to the touchpad.\n\t\t\t\tconst sphereGeometry = new SphereGeometry( 0.001 );\n\t\t\t\tconst material = new MeshBasicMaterial( { color: 0x0000FF } );\n\t\t\t\tconst sphere = new Mesh( sphereGeometry, material );\n\t\t\t\tcomponent.touchPointNode.add( sphere );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( `Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Loop through all the visual responses to be applied to this component\n\t\tObject.values( visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\tconst { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n\n\t\t\t// If animating a transform, find the two nodes to be interpolated between.\n\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\tvisualResponse.minNode = scene.getObjectByName( minNodeName );\n\t\t\t\tvisualResponse.maxNode = scene.getObjectByName( maxNodeName );\n\n\t\t\t\t// If the extents cannot be found, skip this animation\n\t\t\t\tif ( ! visualResponse.minNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${minNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! visualResponse.maxNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${maxNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If the target node cannot be found, skip this animation\n\t\t\tvisualResponse.valueNode = scene.getObjectByName( valueNodeName );\n\t\t\tif ( ! visualResponse.valueNode ) {\n\n\t\t\t\tconsole.warn( `Could not find ${valueNodeName} in the model` );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction addAssetSceneToControllerModel( controllerModel, scene ) {\n\n\t// Find the nodes needed for animation and cache them on the motionController.\n\tfindNodes( controllerModel.motionController, scene );\n\n\t// Apply any environment map that the mesh already has set.\n\tif ( controllerModel.envMap ) {\n\n\t\tscene.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = controllerModel.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// Add the glTF scene to the controllerModel.\n\tcontrollerModel.add( scene );\n\n}\n\nclass XRControllerModelFactory {\n\n\tconstructor( gltfLoader = null ) {\n\n\t\tthis.gltfLoader = gltfLoader;\n\t\tthis.path = DEFAULT_PROFILES_PATH;\n\t\tthis._assetCache = {};\n\n\t\t// If a GLTFLoader wasn't supplied to the constructor create a new one.\n\t\tif ( ! this.gltfLoader ) {\n\n\t\t\tthis.gltfLoader = new GLTFLoader();\n\n\t\t}\n\n\t}\n\n\tcreateControllerModel( controller ) {\n\n\t\tconst controllerModel = new XRControllerModel();\n\t\tlet scene = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.targetRayMode !== 'tracked-pointer' || ! xrInputSource.gamepad ) return;\n\n\t\t\tfetchProfile( xrInputSource, this.path, DEFAULT_PROFILE ).then( ( { profile, assetPath } ) => {\n\n\t\t\t\tcontrollerModel.motionController = new MotionController(\n\t\t\t\t\txrInputSource,\n\t\t\t\t\tprofile,\n\t\t\t\t\tassetPath\n\t\t\t\t);\n\n\t\t\t\tconst cachedAsset = this._assetCache[ controllerModel.motionController.assetUrl ];\n\t\t\t\tif ( cachedAsset ) {\n\n\t\t\t\t\tscene = cachedAsset.scene.clone();\n\n\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! this.gltfLoader ) {\n\n\t\t\t\t\t\tthrow new Error( 'GLTFLoader not set.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gltfLoader.setPath( '' );\n\t\t\t\t\tthis.gltfLoader.load( controllerModel.motionController.assetUrl, ( asset ) => {\n\n\t\t\t\t\t\tthis._assetCache[ controllerModel.motionController.assetUrl ] = asset;\n\n\t\t\t\t\t\tscene = asset.scene.clone();\n\n\t\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t() => {\n\n\t\t\t\t\t\tthrow new Error( `Asset ${controllerModel.motionController.assetUrl} missing or malformed.` );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( ( err ) => {\n\n\t\t\t\tconsole.warn( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontrollerModel.motionController = null;\n\t\t\tcontrollerModel.remove( scene );\n\t\t\tscene = null;\n\n\t\t} );\n\n\t\treturn controllerModel;\n\n\t}\n\n}\n\nexport { XRControllerModelFactory };\n","/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\nexport { Constants, MotionController, fetchProfile, fetchProfilesList };\n","import {\n\tObject3D\n} from 'three';\n\nimport {\n\tXRHandPrimitiveModel\n} from './XRHandPrimitiveModel.js';\n\nimport {\n\tXRHandMeshModel\n} from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n\n\tconstructor( controller ) {\n\n\t\tsuper();\n\n\t\tthis.controller = controller;\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t\tthis.mesh = null;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.motionController ) {\n\n\t\t\tthis.motionController.updateMesh();\n\n\t\t}\n\n\t}\n\n}\n\nclass XRHandModelFactory {\n\n\tconstructor() {\n\n\t\tthis.path = null;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\n\t\treturn this;\n\n\t}\n\n\tcreateHandModel( controller, profile ) {\n\n\t\tconst handModel = new XRHandModel( controller );\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.hand && ! handModel.motionController ) {\n\n\t\t\t\thandModel.xrInputSource = xrInputSource;\n\n\t\t\t\t// @todo Detect profile if not provided\n\t\t\t\tif ( profile === undefined || profile === 'spheres' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'sphere' } );\n\n\t\t\t\t} else if ( profile === 'boxes' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'box' } );\n\n\t\t\t\t} else if ( profile === 'mesh' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandMeshModel( handModel, controller, this.path, xrInputSource.handedness );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcontroller.visible = true;\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontroller.visible = false;\n\t\t\t// handModel.motionController = null;\n\t\t\t// handModel.remove( scene );\n\t\t\t// scene = null;\n\n\t\t} );\n\n\t\treturn handModel;\n\n\t}\n\n}\n\nexport { XRHandModelFactory };\n","import {\n\tDynamicDrawUsage,\n\tSphereGeometry,\n\tBoxGeometry,\n\tMeshStandardMaterial,\n\tInstancedMesh,\n\tMatrix4,\n\tVector3\n} from 'three';\n\nconst _matrix = new Matrix4();\nconst _vector = new Vector3();\n\nclass XRHandPrimitiveModel {\n\n\tconstructor( handModel, controller, path, handedness, options ) {\n\n\t\tthis.controller = controller;\n\t\tthis.handModel = handModel;\n\t\tthis.envMap = null;\n\n\t\tlet geometry;\n\n\t\tif ( ! options || ! options.primitive || options.primitive === 'sphere' ) {\n\n\t\t\tgeometry = new SphereGeometry( 1, 10, 10 );\n\n\t\t} else if ( options.primitive === 'box' ) {\n\n\t\t\tgeometry = new BoxGeometry( 1, 1, 1 );\n\n\t\t}\n\n\t\tconst material = new MeshStandardMaterial();\n\n\t\tthis.handMesh = new InstancedMesh( geometry, material, 30 );\n\t\tthis.handMesh.instanceMatrix.setUsage( DynamicDrawUsage ); // will be updated every frame\n\t\tthis.handMesh.castShadow = true;\n\t\tthis.handMesh.receiveShadow = true;\n\t\tthis.handModel.add( this.handMesh );\n\n\t\tthis.joints = [\n\t\t\t'wrist',\n\t\t\t'thumb-metacarpal',\n\t\t\t'thumb-phalanx-proximal',\n\t\t\t'thumb-phalanx-distal',\n\t\t\t'thumb-tip',\n\t\t\t'index-finger-metacarpal',\n\t\t\t'index-finger-phalanx-proximal',\n\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t'index-finger-phalanx-distal',\n\t\t\t'index-finger-tip',\n\t\t\t'middle-finger-metacarpal',\n\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t'middle-finger-phalanx-distal',\n\t\t\t'middle-finger-tip',\n\t\t\t'ring-finger-metacarpal',\n\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t'ring-finger-phalanx-distal',\n\t\t\t'ring-finger-tip',\n\t\t\t'pinky-finger-metacarpal',\n\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t'pinky-finger-tip'\n\t\t];\n\n\t}\n\n\tupdateMesh() {\n\n\t\tconst defaultRadius = 0.008;\n\t\tconst joints = this.controller.joints;\n\n\t\tlet count = 0;\n\n\t\tfor ( let i = 0; i < this.joints.length; i ++ ) {\n\n\t\t\tconst joint = joints[ this.joints[ i ] ];\n\n\t\t\tif ( joint.visible ) {\n\n\t\t\t\t_vector.setScalar( joint.jointRadius || defaultRadius );\n\t\t\t\t_matrix.compose( joint.position, joint.quaternion, _vector );\n\t\t\t\tthis.handMesh.setMatrixAt( i, _matrix );\n\n\t\t\t\tcount ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.handMesh.count = count;\n\t\tthis.handMesh.instanceMatrix.needsUpdate = true;\n\n\t}\n\n}\n\nexport { XRHandPrimitiveModel };\n","import { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/';\n\nclass XRHandMeshModel {\n\n\tconstructor( handModel, controller, path, handedness ) {\n\n\t\tthis.controller = controller;\n\t\tthis.handModel = handModel;\n\n\t\tthis.bones = [];\n\n\t\tconst loader = new GLTFLoader();\n\t\tloader.setPath( path || DEFAULT_HAND_PROFILE_PATH );\n\t\tloader.load( `${handedness}.glb`, gltf => {\n\n\t\t\tconst object = gltf.scene.children[ 0 ];\n\t\t\tthis.handModel.add( object );\n\n\t\t\tconst mesh = object.getObjectByProperty( 'type', 'SkinnedMesh' );\n\t\t\tmesh.frustumCulled = false;\n\t\t\tmesh.castShadow = true;\n\t\t\tmesh.receiveShadow = true;\n\n\t\t\tconst joints = [\n\t\t\t\t'wrist',\n\t\t\t\t'thumb-metacarpal',\n\t\t\t\t'thumb-phalanx-proximal',\n\t\t\t\t'thumb-phalanx-distal',\n\t\t\t\t'thumb-tip',\n\t\t\t\t'index-finger-metacarpal',\n\t\t\t\t'index-finger-phalanx-proximal',\n\t\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t\t'index-finger-phalanx-distal',\n\t\t\t\t'index-finger-tip',\n\t\t\t\t'middle-finger-metacarpal',\n\t\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t\t'middle-finger-phalanx-distal',\n\t\t\t\t'middle-finger-tip',\n\t\t\t\t'ring-finger-metacarpal',\n\t\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t\t'ring-finger-phalanx-distal',\n\t\t\t\t'ring-finger-tip',\n\t\t\t\t'pinky-finger-metacarpal',\n\t\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t\t'pinky-finger-tip',\n\t\t\t];\n\n\t\t\tjoints.forEach( jointName => {\n\n\t\t\t\tconst bone = object.getObjectByName( jointName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\tbone.jointName = jointName;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( `Couldn't find ${jointName} in ${handedness} hand mesh` );\n\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push( bone );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tupdateMesh() {\n\n\t\t// XR Joints\n\t\tconst XRJoints = this.controller.joints;\n\n\t\tfor ( let i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tconst XRJoint = XRJoints[ bone.jointName ];\n\n\t\t\t\tif ( XRJoint.visible ) {\n\n\t\t\t\t\tconst position = XRJoint.position;\n\n\t\t\t\t\tbone.position.copy( position );\n\t\t\t\t\tbone.quaternion.copy( XRJoint.quaternion );\n\t\t\t\t\t// bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { XRHandMeshModel };\n","import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';\nimport { XRHandModelFactory } from 'three/examples/jsm/webxr/XRHandModelFactory.js';\n\nconst controllerModelFactory = new XRControllerModelFactory();\nconst handModelFactory = new XRHandModelFactory();\n\nmodule.exports.load = (renderer, cameraGroup) => {\n\n    const controllers = [0,1].map(function (index) {\n        const controller = renderer.xr.getController(index);\n        cameraGroup.add(controller);\n\n        const controllerGrip = renderer.xr.getControllerGrip(index);\n        const model = controllerModelFactory.createControllerModel( controllerGrip );\n        controllerGrip.add( model );\n        cameraGroup.add( controllerGrip );\n\n        const hand = renderer.xr.getHand( index );\n        hand.add( handModelFactory.createHandModel( hand, \"mesh\" ) );\n        cameraGroup.add( hand );\n\n        return {\n            hand, grip: controllerGrip, controller\n        }\n    });\n\n    const controller1 = controllers[0].controller;\n    const controller2 = controllers[1].controller;\n    const hand1 = controllers[0].hand;\n    const hand2 = controllers[1].hand;\n    const controllerGrip1 = controllers[0].grip;\n    const controllerGrip2 = controllers[1].grip;\n\n    return {\n        controller1,\n        controller2,\n        controllerGrip1,\n        controllerGrip2,\n        hand1,\n        hand2\n    };\n\n};\n"],"names":["$3NNSQ","parcelRequire","$2e81c5a0f10917ae$export$da3cdac99155b982","static","renderer","button","document","createElement","disableButton","style","display","cursor","left","width","onmouseenter","onmouseleave","onclick","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","opacity","outline","zIndex","navigator","id","xr","isSessionSupported","then","supported","currentSession","async","onSessionStarted","session","addEventListener","onSessionEnded","setSession","textContent","removeEventListener","sessionInit","optionalFeatures","requestSession","end","showEnterVR","xrSessionIsGranted","click","catch","exception","console","warn","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","test","userAgent","registerSessionGrantedListener","config","$ilwiq","$7a8c3c23f3e49c64$export$a002182e51710d39","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","$7a8c3c23f3e49c64$var$fetchJsonFile","path","response","fetch","ok","json","Error","statusText","$7a8c3c23f3e49c64$export$665d336fd546fbed","xrInputSource","basePath","defaultProfile","getAssetPath","supportedProfilesList","$7a8c3c23f3e49c64$export$cdc669b4504544b3","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","$7a8c3c23f3e49c64$var$defaultComponentValues","xAxis","yAxis","state","$7a8c3c23f3e49c64$var$VisualResponse","constructor","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","normalizedXAxis","normalizedYAxis","x","y","Math","sqrt","theta","atan2","cos","sin","$7a8c3c23f3e49c64$var$normalizeAxes","includes","$7a8c3c23f3e49c64$var$Component","componentId","componentDescription","visualResponses","gamepadIndices","length","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","$7a8c3c23f3e49c64$export$d04f314260fc930a","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push","$e7e1ee5465c2c699$var$XRControllerModel","Object3D","super","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","valueNode","minNode","maxNode","visible","quaternion","slerpQuaternions","lerpVectors","$e7e1ee5465c2c699$var$addAssetSceneToControllerModel","controllerModel","scene","touchPointNode","getObjectByName","sphereGeometry","SphereGeometry","MeshBasicMaterial","sphere","Mesh","add","$e7e1ee5465c2c699$var$findNodes","$1e39416a9737288d$var$_matrix","Matrix4","$1e39416a9737288d$var$_vector","Vector3","$1e39416a9737288d$export$31b2556b4cd059d","handModel","controller","options","geometry","primitive","BoxGeometry","MeshStandardMaterial","handMesh","InstancedMesh","instanceMatrix","setUsage","DynamicDrawUsage","castShadow","receiveShadow","joints","updateMesh","count","i","joint","setScalar","jointRadius","compose","setMatrixAt","$7lx9d","$e32e5cb67549210a$export$bfa512d6162fb52e","bones","loader","GLTFLoader","setPath","load","gltf","object","children","mesh","getObjectByProperty","frustumCulled","jointName","bone","XRJoints","XRJoint","copy","$b600638a5ed0e434$var$XRHandModel","$cf7c6c3110abe81a$export$11e63f7b0f3d9900","$cf7c6c3110abe81a$var$controllerModelFactory","gltfLoader","_assetCache","createControllerModel","event","targetRayMode","cachedAsset","clone","asset","err","remove","$cf7c6c3110abe81a$var$handModelFactory","createHandModel","hand","cameraGroup","controllers","map","index","getController","controllerGrip","getControllerGrip","model","getHand","grip","controller1","controller2","hand1","hand2","$6Awmu","displayPainting","clearPaintings","$443da268708619f4$var$gallery","$443da268708619f4$var$web3","$443da268708619f4$var$contract","$443da268708619f4$var$contractAddrReg","RegExp","$443da268708619f4$var$queryParams","Proxy","URLSearchParams","search","get","searchParams","prop","$443da268708619f4$var$gltfLoader","$443da268708619f4$var$scene","Scene","$443da268708619f4$var$camera","PerspectiveCamera","innerWidth","innerHeight","$443da268708619f4$var$cameraGroup","Group","$443da268708619f4$var$renderer","WebGLRenderer","antialias","$443da268708619f4$var$onWindowResize","aspect","updateProjectionMatrix","setSize","shadowMap","enabled","Color","init3d","Promise","resolve","reject","galleryPreset","$fZ8NE","findById","log","scale","set","z","fov","camera","postRenderModifier","setAnimationLoop","render","error","body","appendChild","domElement","createButton","loadGallery","g","alert","$parcel$interopDefault","eth","Contract","$33SoD","$hXJAl","show","galleryIndex","parseInt","methods","getGalleryIndex","call","paintings","getPaintings","painting","$443da268708619f4$require$displayPainting","posX","posY","posZ","rotX","rotY","rotZ","url","hide"],"version":3,"file":"gallery.9260b42f.js.map"}