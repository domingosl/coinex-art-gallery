{"mappings":"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","sources":["client_src/js/fade.js","client_src/js/gamepad.js","client_src/js/gallery.js","node_modules/three/examples/jsm/webxr/VRButton.js","node_modules/three/examples/jsm/webxr/XRControllerModelFactory.js","node_modules/three/examples/jsm/libs/motion-controllers.module.js","node_modules/three/examples/jsm/webxr/XRHandModelFactory.js","node_modules/three/examples/jsm/webxr/XRHandPrimitiveModel.js","node_modules/three/examples/jsm/webxr/XRHandMeshModel.js","client_src/js/controllers.js","client_src/js/locomotion.js"],"sourcesContent":["module.exports = (camera, cameraGroup) => {\n\n    function locomotion(offset) {\n        cameraGroup.position.add(offset);\n    }\n\n    return locomotion;\n\n}","module.exports.get = (renderer, rafCallbacks) => {\n\n    const prevGamePads = new Map();\n    const gamepad = new EventTarget();\n\n    function dispatchEvent(type, detail) {\n        const specificEvent = new CustomEvent(type, {detail});\n\n        const generalDetail = {type};\n        Object.assign(generalDetail, detail);\n        const generalEvent = new CustomEvent('gamepadInteraction', {detail: generalDetail});\n\n        gamepad.dispatchEvent(specificEvent);\n        gamepad.dispatchEvent(generalEvent);\n    }\n\n    rafCallbacks.add((timestamp, frame) => {\n\n        const session = renderer.xr.getSession();\n\n        let i = 0;\n        if (session) for (const source of session.inputSources) {\n            if (!source.gamepad) continue;\n            const controller = renderer.xr.getController(i++);\n            const old = prevGamePads.get(source);\n            const data = {\n                buttons: source.gamepad.buttons.map(b => b.value),\n                axes: source.gamepad.axes.slice(0)\n            };\n            if (old) {\n                data.buttons.forEach((value,i)=>{\n                    if (value !== old.buttons[i]) {\n                        if (value === 1) {\n                            dispatchEvent(`button${i}Down`, {value, source, controller,data});\n                        } else {\n                            dispatchEvent(`button${i}Up`, {value, source, controller,data});\n                        }\n                    }\n                });\n                data.axes.forEach((value,i)=>{\n                    if (value !== old.axes[i]) {\n                        dispatchEvent(`axes${i}Move`, {value, source, controller,data});\n                        if (old.axes[i] === 0) {\n                            dispatchEvent(`axes${i}MoveStart`, {value, source, controller,data});\n                        }\n                        if (Math.abs(old.axes[i]) < 0.5 && Math.abs(value) > 0.5) {\n                            dispatchEvent(`axes${i}MoveMiddle`, {value, source, controller,data});\n                        }\n                        if (value === 0) {\n                            dispatchEvent(`axes${i}MoveEnd`, {value, source, controller,data});\n                        }\n                    }\n                });\n            }\n            prevGamePads.set(source, data);\n        }\n    });\n\n    return gamepad;\n}","require('dotenv').config();\n\nimport Web3 from 'web3';\nimport abi from '../../contracts/abi.json';\n\nconst loader = require('../js/blocking-loader');\nconst galleriesPresets = require('../js/galleries-presets');\nconst controllers = require('./controllers');\nconst locomotion = require('./locomotion');\n\nconst { displayPainting, clearPaintings } = require('../js/display-paintings');\n\nlet gallery;\nlet web3;\nlet contract;\n\nconst contractAddrReg = new RegExp('^0x[a-fA-F0-9]{40}$');\n\nconst queryParams = new Proxy(new URLSearchParams(window.location.search), {\n    get: (searchParams, prop) => searchParams.get(prop),\n});\n\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\n\nconst listener = new THREE.AudioListener();\n\nconst gltfLoader = new GLTFLoader();\nconst scene = new THREE.Scene();\nlet camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n);\n\ncamera.add(listener);\n\nconst cameraGroup = new THREE.Group();\ncameraGroup.add(camera);\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\n\nrenderer.shadowMap.enabled = true;\n\nscene.background = new THREE.Color(135, 206, 235);\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\nrenderer.xr.enabled = true;\n\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\n\nwindow.init3d = (id) => new Promise((resolve, reject) => {\n\n    let gallery;\n    const galleryPreset = galleriesPresets.findById(id);\n\n    console.log(\"Gallery Preset:\", galleryPreset);\n\n    gltfLoader.load(\n        galleryPreset.location,\n        async function (gltf) {\n\n            gallery = gltf.scene;\n            gallery.scale.set(galleryPreset.scene.scale, galleryPreset.scene.scale, galleryPreset.scene.scale);\n            gallery.position.set(\n                galleryPreset.scene.position.x,\n                galleryPreset.scene.position.y,\n                galleryPreset.scene.position.z);\n            gallery.rotation.set(\n                galleryPreset.scene.rotation.x,\n                galleryPreset.scene.rotation.y,\n                galleryPreset.scene.rotation.z);\n\n            camera.fov = (galleryPreset.camera.fov);\n            camera.updateProjectionMatrix();\n\n            camera.position.set(\n                galleryPreset.camera.position.x,\n                galleryPreset.camera.position.y,\n                galleryPreset.camera.position.z\n            );\n\n            if(typeof galleryPreset.postRenderModifier === 'function')\n                await galleryPreset.postRenderModifier(gallery);\n\n            scene.add(cameraGroup);\n\n            const rafCallbacks = new Set();\n\n\n            let sound = new THREE.Audio( listener );\n\n\n\n            renderer.xr.addEventListener('sessionstart', function () {\n\n                cameraGroup.position.x = galleryPreset.camera.position.x;\n                cameraGroup.position.z = galleryPreset.camera.position.z;\n\n                const { controller1, controller2 } = controllers.load(renderer, cameraGroup);\n                locomotion.load(scene, renderer, camera, cameraGroup, rafCallbacks, controller1, controller2);\n\n                // load a sound and set it as the Audio object's buffer\n                const audioLoader = new THREE.AudioLoader();\n                audioLoader.load( '/assets/music/ambient.mp3', function( buffer ) {\n                    sound.setBuffer( buffer );\n                    sound.setLoop( true );\n                    sound.setVolume( 0.1 );\n                    sound.play();\n                });\n\n            });\n\n            renderer.xr.addEventListener('sessionend', function () {\n                sound.stop();\n            });\n\n            window.addEventListener('resize', onWindowResize, false);\n            onWindowResize();\n\n            //const controls = new OrbitControls(camera, renderer.domElement);\n\n\n            renderer.setAnimationLoop(function (time ,frame) {\n                rafCallbacks.forEach(cb => cb(time, frame));\n                renderer.render( scene, camera );\n                //controls.update();\n            });\n\n            resolve(gallery);\n\n        },\n        () => {},\n        (error) => {\n            console.log(error);\n            reject();\n        });\n\n    document.body.appendChild(renderer.domElement);\n    document.body.appendChild(VRButton.createButton(renderer));\n\n\n});\n\nwindow.loadGallery = async () => {\n\n    if(!contractAddrReg.test(queryParams.g) && queryParams.g !== 'example1' && queryParams.g !== 'example2')\n        return alert(\"Invalid Gallery Address!\");\n\n    web3 = new Web3(process.env.COINEX_NET_RPC_URL);\n\n    contract = new web3.eth.Contract(abi,\n        queryParams.g === 'example1' ?\n            process.env.GALLERY_EXAMPLE_1 : queryParams.g === 'example2' ?\n                process.env.GALLERY_EXAMPLE_2 : queryParams.g);\n\n    loader.show();\n\n    const galleryIndex = parseInt(await contract.methods.getGalleryIndex().call());\n\n    const paintings = await contract.methods.getPaintings().call();\n\n    console.log(\"Paintings\", paintings);\n\n    const gallery = await init3d(galleryIndex);\n\n    const galleryPreset = galleriesPresets.findById(galleryIndex);\n\n    const promises = [];\n    for(const painting in paintings) {\n        promises.push(await displayPainting(\n            gallery,\n            paintings[painting].posX,\n            paintings[painting].posY,\n            paintings[painting].posZ,\n            paintings[painting].rotX,\n            paintings[painting].rotY,\n            paintings[painting].rotZ,\n            paintings[painting].width,\n            paintings[painting].aspect,\n            galleryPreset.textSize,\n            paintings[painting].url\n        ));\n    }\n\n    await Promise.allSettled(promises);\n    scene.add(gallery);\n\n    loader.hide();\n\n};\n\nloadGallery();","class VRButton {\n\n\tstatic createButton( renderer ) {\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t\t\t// be requested separately.)\n\n\t\t\t\t\tconst sessionInit = { optionalFeatures: [ 'local-floor', 'bounded-floor', 'hand-tracking', 'layers' ] };\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction showVRNotAllowed( exception ) {\n\n\t\t\tdisableButton();\n\n\t\t\tconsole.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n\t\t\tbutton.textContent = 'VR NOT ALLOWED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t\tif ( supported && VRButton.xrSessionIsGranted ) {\n\n\t\t\t\t\tbutton.click();\n\n\t\t\t\t}\n\n\t\t\t} ).catch( showVRNotAllowed );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n\tstatic xrSessionIsGranted = false;\n\n\tstatic registerSessionGrantedListener() {\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\t// WebXRViewer (based on Firefox) has a bug where addEventListener\n\t\t\t// throws a silent exception and aborts execution entirely.\n\t\t\tif ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n\t\t\tnavigator.xr.addEventListener( 'sessiongranted', () => {\n\n\t\t\t\tVRButton.xrSessionIsGranted = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nVRButton.registerSessionGrantedListener();\n\nexport { VRButton };\n","import {\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tSphereGeometry,\n} from 'three';\n\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nimport {\n\tConstants as MotionControllerConstants,\n\tfetchProfile,\n\tMotionController\n} from '../libs/motion-controllers.module.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t}\n\n\tsetEnvironmentMap( envMap ) {\n\n\t\tif ( this.envMap == envMap ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.envMap = envMap;\n\t\tthis.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = this.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Polls data from the XRInputSource and updates the model's components to match\n\t * the real world data\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( ! this.motionController ) return;\n\n\t\t// Cause the MotionController to poll the Gamepad for data\n\t\tthis.motionController.updateFromGamepad();\n\n\t\t// Update the 3D model to reflect the button, thumbstick, and touchpad state\n\t\tObject.values( this.motionController.components ).forEach( ( component ) => {\n\n\t\t\t// Update node data based on the visual responses' current states\n\t\t\tObject.values( component.visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\t\tconst { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n\n\t\t\t\t// Skip if the visual response node is not found. No error is needed,\n\t\t\t\t// because it will have been reported at load time.\n\t\t\t\tif ( ! valueNode ) return;\n\n\t\t\t\t// Calculate the new properties based on the weight supplied\n\t\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY ) {\n\n\t\t\t\t\tvalueNode.visible = value;\n\n\t\t\t\t} else if ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\t\tvalueNode.quaternion.slerpQuaternions(\n\t\t\t\t\t\tminNode.quaternion,\n\t\t\t\t\t\tmaxNode.quaternion,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t\tvalueNode.position.lerpVectors(\n\t\t\t\t\t\tminNode.position,\n\t\t\t\t\t\tmaxNode.position,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes( motionController, scene ) {\n\n\t// Loop through the components and find the nodes needed for each components' visual responses\n\tObject.values( motionController.components ).forEach( ( component ) => {\n\n\t\tconst { type, touchPointNodeName, visualResponses } = component;\n\n\t\tif ( type === MotionControllerConstants.ComponentType.TOUCHPAD ) {\n\n\t\t\tcomponent.touchPointNode = scene.getObjectByName( touchPointNodeName );\n\t\t\tif ( component.touchPointNode ) {\n\n\t\t\t\t// Attach a touch dot to the touchpad.\n\t\t\t\tconst sphereGeometry = new SphereGeometry( 0.001 );\n\t\t\t\tconst material = new MeshBasicMaterial( { color: 0x0000FF } );\n\t\t\t\tconst sphere = new Mesh( sphereGeometry, material );\n\t\t\t\tcomponent.touchPointNode.add( sphere );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( `Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Loop through all the visual responses to be applied to this component\n\t\tObject.values( visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\tconst { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n\n\t\t\t// If animating a transform, find the two nodes to be interpolated between.\n\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\tvisualResponse.minNode = scene.getObjectByName( minNodeName );\n\t\t\t\tvisualResponse.maxNode = scene.getObjectByName( maxNodeName );\n\n\t\t\t\t// If the extents cannot be found, skip this animation\n\t\t\t\tif ( ! visualResponse.minNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${minNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! visualResponse.maxNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${maxNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If the target node cannot be found, skip this animation\n\t\t\tvisualResponse.valueNode = scene.getObjectByName( valueNodeName );\n\t\t\tif ( ! visualResponse.valueNode ) {\n\n\t\t\t\tconsole.warn( `Could not find ${valueNodeName} in the model` );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction addAssetSceneToControllerModel( controllerModel, scene ) {\n\n\t// Find the nodes needed for animation and cache them on the motionController.\n\tfindNodes( controllerModel.motionController, scene );\n\n\t// Apply any environment map that the mesh already has set.\n\tif ( controllerModel.envMap ) {\n\n\t\tscene.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = controllerModel.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// Add the glTF scene to the controllerModel.\n\tcontrollerModel.add( scene );\n\n}\n\nclass XRControllerModelFactory {\n\n\tconstructor( gltfLoader = null ) {\n\n\t\tthis.gltfLoader = gltfLoader;\n\t\tthis.path = DEFAULT_PROFILES_PATH;\n\t\tthis._assetCache = {};\n\n\t\t// If a GLTFLoader wasn't supplied to the constructor create a new one.\n\t\tif ( ! this.gltfLoader ) {\n\n\t\t\tthis.gltfLoader = new GLTFLoader();\n\n\t\t}\n\n\t}\n\n\tcreateControllerModel( controller ) {\n\n\t\tconst controllerModel = new XRControllerModel();\n\t\tlet scene = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.targetRayMode !== 'tracked-pointer' || ! xrInputSource.gamepad ) return;\n\n\t\t\tfetchProfile( xrInputSource, this.path, DEFAULT_PROFILE ).then( ( { profile, assetPath } ) => {\n\n\t\t\t\tcontrollerModel.motionController = new MotionController(\n\t\t\t\t\txrInputSource,\n\t\t\t\t\tprofile,\n\t\t\t\t\tassetPath\n\t\t\t\t);\n\n\t\t\t\tconst cachedAsset = this._assetCache[ controllerModel.motionController.assetUrl ];\n\t\t\t\tif ( cachedAsset ) {\n\n\t\t\t\t\tscene = cachedAsset.scene.clone();\n\n\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! this.gltfLoader ) {\n\n\t\t\t\t\t\tthrow new Error( 'GLTFLoader not set.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gltfLoader.setPath( '' );\n\t\t\t\t\tthis.gltfLoader.load( controllerModel.motionController.assetUrl, ( asset ) => {\n\n\t\t\t\t\t\tthis._assetCache[ controllerModel.motionController.assetUrl ] = asset;\n\n\t\t\t\t\t\tscene = asset.scene.clone();\n\n\t\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t() => {\n\n\t\t\t\t\t\tthrow new Error( `Asset ${controllerModel.motionController.assetUrl} missing or malformed.` );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( ( err ) => {\n\n\t\t\t\tconsole.warn( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontrollerModel.motionController = null;\n\t\t\tcontrollerModel.remove( scene );\n\t\t\tscene = null;\n\n\t\t} );\n\n\t\treturn controllerModel;\n\n\t}\n\n}\n\nexport { XRControllerModelFactory };\n","/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\nexport { Constants, MotionController, fetchProfile, fetchProfilesList };\n","import {\n\tObject3D\n} from 'three';\n\nimport {\n\tXRHandPrimitiveModel\n} from './XRHandPrimitiveModel.js';\n\nimport {\n\tXRHandMeshModel\n} from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n\n\tconstructor( controller ) {\n\n\t\tsuper();\n\n\t\tthis.controller = controller;\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t\tthis.mesh = null;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.motionController ) {\n\n\t\t\tthis.motionController.updateMesh();\n\n\t\t}\n\n\t}\n\n}\n\nclass XRHandModelFactory {\n\n\tconstructor() {\n\n\t\tthis.path = null;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\n\t\treturn this;\n\n\t}\n\n\tcreateHandModel( controller, profile ) {\n\n\t\tconst handModel = new XRHandModel( controller );\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.hand && ! handModel.motionController ) {\n\n\t\t\t\thandModel.xrInputSource = xrInputSource;\n\n\t\t\t\t// @todo Detect profile if not provided\n\t\t\t\tif ( profile === undefined || profile === 'spheres' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'sphere' } );\n\n\t\t\t\t} else if ( profile === 'boxes' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'box' } );\n\n\t\t\t\t} else if ( profile === 'mesh' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandMeshModel( handModel, controller, this.path, xrInputSource.handedness );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcontroller.visible = true;\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontroller.visible = false;\n\t\t\t// handModel.motionController = null;\n\t\t\t// handModel.remove( scene );\n\t\t\t// scene = null;\n\n\t\t} );\n\n\t\treturn handModel;\n\n\t}\n\n}\n\nexport { XRHandModelFactory };\n","import {\n\tDynamicDrawUsage,\n\tSphereGeometry,\n\tBoxGeometry,\n\tMeshStandardMaterial,\n\tInstancedMesh,\n\tMatrix4,\n\tVector3\n} from 'three';\n\nconst _matrix = new Matrix4();\nconst _vector = new Vector3();\n\nclass XRHandPrimitiveModel {\n\n\tconstructor( handModel, controller, path, handedness, options ) {\n\n\t\tthis.controller = controller;\n\t\tthis.handModel = handModel;\n\t\tthis.envMap = null;\n\n\t\tlet geometry;\n\n\t\tif ( ! options || ! options.primitive || options.primitive === 'sphere' ) {\n\n\t\t\tgeometry = new SphereGeometry( 1, 10, 10 );\n\n\t\t} else if ( options.primitive === 'box' ) {\n\n\t\t\tgeometry = new BoxGeometry( 1, 1, 1 );\n\n\t\t}\n\n\t\tconst material = new MeshStandardMaterial();\n\n\t\tthis.handMesh = new InstancedMesh( geometry, material, 30 );\n\t\tthis.handMesh.instanceMatrix.setUsage( DynamicDrawUsage ); // will be updated every frame\n\t\tthis.handMesh.castShadow = true;\n\t\tthis.handMesh.receiveShadow = true;\n\t\tthis.handModel.add( this.handMesh );\n\n\t\tthis.joints = [\n\t\t\t'wrist',\n\t\t\t'thumb-metacarpal',\n\t\t\t'thumb-phalanx-proximal',\n\t\t\t'thumb-phalanx-distal',\n\t\t\t'thumb-tip',\n\t\t\t'index-finger-metacarpal',\n\t\t\t'index-finger-phalanx-proximal',\n\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t'index-finger-phalanx-distal',\n\t\t\t'index-finger-tip',\n\t\t\t'middle-finger-metacarpal',\n\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t'middle-finger-phalanx-distal',\n\t\t\t'middle-finger-tip',\n\t\t\t'ring-finger-metacarpal',\n\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t'ring-finger-phalanx-distal',\n\t\t\t'ring-finger-tip',\n\t\t\t'pinky-finger-metacarpal',\n\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t'pinky-finger-tip'\n\t\t];\n\n\t}\n\n\tupdateMesh() {\n\n\t\tconst defaultRadius = 0.008;\n\t\tconst joints = this.controller.joints;\n\n\t\tlet count = 0;\n\n\t\tfor ( let i = 0; i < this.joints.length; i ++ ) {\n\n\t\t\tconst joint = joints[ this.joints[ i ] ];\n\n\t\t\tif ( joint.visible ) {\n\n\t\t\t\t_vector.setScalar( joint.jointRadius || defaultRadius );\n\t\t\t\t_matrix.compose( joint.position, joint.quaternion, _vector );\n\t\t\t\tthis.handMesh.setMatrixAt( i, _matrix );\n\n\t\t\t\tcount ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.handMesh.count = count;\n\t\tthis.handMesh.instanceMatrix.needsUpdate = true;\n\n\t}\n\n}\n\nexport { XRHandPrimitiveModel };\n","import { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/';\n\nclass XRHandMeshModel {\n\n\tconstructor( handModel, controller, path, handedness ) {\n\n\t\tthis.controller = controller;\n\t\tthis.handModel = handModel;\n\n\t\tthis.bones = [];\n\n\t\tconst loader = new GLTFLoader();\n\t\tloader.setPath( path || DEFAULT_HAND_PROFILE_PATH );\n\t\tloader.load( `${handedness}.glb`, gltf => {\n\n\t\t\tconst object = gltf.scene.children[ 0 ];\n\t\t\tthis.handModel.add( object );\n\n\t\t\tconst mesh = object.getObjectByProperty( 'type', 'SkinnedMesh' );\n\t\t\tmesh.frustumCulled = false;\n\t\t\tmesh.castShadow = true;\n\t\t\tmesh.receiveShadow = true;\n\n\t\t\tconst joints = [\n\t\t\t\t'wrist',\n\t\t\t\t'thumb-metacarpal',\n\t\t\t\t'thumb-phalanx-proximal',\n\t\t\t\t'thumb-phalanx-distal',\n\t\t\t\t'thumb-tip',\n\t\t\t\t'index-finger-metacarpal',\n\t\t\t\t'index-finger-phalanx-proximal',\n\t\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t\t'index-finger-phalanx-distal',\n\t\t\t\t'index-finger-tip',\n\t\t\t\t'middle-finger-metacarpal',\n\t\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t\t'middle-finger-phalanx-distal',\n\t\t\t\t'middle-finger-tip',\n\t\t\t\t'ring-finger-metacarpal',\n\t\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t\t'ring-finger-phalanx-distal',\n\t\t\t\t'ring-finger-tip',\n\t\t\t\t'pinky-finger-metacarpal',\n\t\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t\t'pinky-finger-tip',\n\t\t\t];\n\n\t\t\tjoints.forEach( jointName => {\n\n\t\t\t\tconst bone = object.getObjectByName( jointName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\tbone.jointName = jointName;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( `Couldn't find ${jointName} in ${handedness} hand mesh` );\n\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push( bone );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tupdateMesh() {\n\n\t\t// XR Joints\n\t\tconst XRJoints = this.controller.joints;\n\n\t\tfor ( let i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tconst XRJoint = XRJoints[ bone.jointName ];\n\n\t\t\t\tif ( XRJoint.visible ) {\n\n\t\t\t\t\tconst position = XRJoint.position;\n\n\t\t\t\t\tbone.position.copy( position );\n\t\t\t\t\tbone.quaternion.copy( XRJoint.quaternion );\n\t\t\t\t\t// bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { XRHandMeshModel };\n","import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';\nimport { XRHandModelFactory } from 'three/examples/jsm/webxr/XRHandModelFactory.js';\n\nconst controllerModelFactory = new XRControllerModelFactory();\nconst handModelFactory = new XRHandModelFactory();\n\nmodule.exports.load = (renderer, cameraGroup) => {\n\n    const controllers = [0,1].map(function (index) {\n        const controller = renderer.xr.getController(index);\n        cameraGroup.add(controller);\n\n        const controllerGrip = renderer.xr.getControllerGrip(index);\n        const model = controllerModelFactory.createControllerModel( controllerGrip );\n        controllerGrip.add( model );\n        cameraGroup.add( controllerGrip );\n\n        const hand = renderer.xr.getHand( index );\n        hand.add( handModelFactory.createHandModel( hand, \"mesh\" ) );\n        cameraGroup.add( hand );\n\n        return {\n            hand, grip: controllerGrip, controller\n        }\n    });\n\n    const controller1 = controllers[0].controller;\n    const controller2 = controllers[1].controller;\n    const hand1 = controllers[0].hand;\n    const hand2 = controllers[1].hand;\n    const controllerGrip1 = controllers[0].grip;\n    const controllerGrip2 = controllers[1].grip;\n\n    return {\n        controller1,\n        controller2,\n        controllerGrip1,\n        controllerGrip2,\n        hand1,\n        hand2\n    };\n\n};\n","import {\n    Mesh,\n    MeshBasicMaterial,\n    Vector3,\n    PointLight,\n    PlaneGeometry,\n    TextureLoader,\n    BufferGeometry,\n    BufferAttribute,\n    LineBasicMaterial,\n    AdditiveBlending,\n    Line,\n    Raycaster,\n    ArrowHelper\n} from  'three';\n\nmodule.exports.load = (scene, renderer, camera, cameraGroup, rafCallbacks, controller1, controller2) => {\n\n    const locomotion = require('./fade')(camera, cameraGroup);\n\n    // Utility Vectors\n    const g = new Vector3(0,-9.8,0);\n    const tempVec = new Vector3();\n    const tempVec1 = new Vector3();\n    const tempVecP = new Vector3();\n    const tempVecV = new Vector3();\n\n    // Guideline parabola function\n    function positionAtT(inVec,t,p,v,g) {\n        inVec.copy(p);\n        inVec.addScaledVector(v,t);\n        inVec.addScaledVector(g,0.5*t**2);\n        return inVec;\n    }\n\n    // The guideline\n    const lineSegments=20;\n    const lineGeometry = new BufferGeometry();\n    const lineGeometryVertices = new Float32Array((lineSegments +1) * 3);\n    lineGeometryVertices.fill(0);\n    const lineGeometryColors = new Float32Array((lineSegments +1) * 3);\n    lineGeometryColors.fill(0.5);\n    lineGeometry.setAttribute('position', new BufferAttribute(lineGeometryVertices, 3));\n    lineGeometry.setAttribute('color', new BufferAttribute(lineGeometryColors, 3));\n    const lineMaterial = new LineBasicMaterial({ vertexColors: true, blending: AdditiveBlending });\n    const guideline = new Line( lineGeometry, lineMaterial );\n\n    // The light at the end of the line\n    const guideLight = new PointLight(0xffeeaa, 0, 2);\n\n    // The target on the ground\n    const guideSpriteTexture = new TextureLoader().load('/assets/img/target.png');\n    const guideSprite = new Mesh(\n        new PlaneGeometry(0.3, 0.3, 1, 1),\n        new MeshBasicMaterial({\n            map: guideSpriteTexture,\n            blending: AdditiveBlending,\n            color: 0x555555,\n            transparent: true\n        })\n    );\n    guideSprite.rotation.x = -Math.PI/2;\n\n    let guidingController = null;\n    function onSelectStart(e) {\n\n        // This is e.data is an XRInputSource and if\n        // it has a hand and being handled by hand tracking so do nothing\n        if (e && e.data && e.data.hand) {\n            return;\n        }\n\n        const controller = this;\n\n        console.log(\"startGuide\", controller);\n\n        guidingController = controller;\n        guideLight.intensity = 1;\n        controller.add(guideline);\n        scene.add(guideSprite);\n    }\n\n    const raycaster = new Raycaster();\n\n    function onSelectEnd() {\n        if (guidingController === this) {\n            console.log(\"onSelectEnd\", this);\n\n            // first work out vector from feet to cursor\n\n            // feet position\n            const feetPos = renderer.xr.getCamera(camera).getWorldPosition(tempVec);\n            feetPos.y = 0;\n\n            // cursor position\n            const p = guidingController.getWorldPosition(tempVecP);\n            const v = guidingController.getWorldDirection(tempVecV);\n            v.multiplyScalar(6);\n            const t = (-v.y  + Math.sqrt(v.y**2 - 2*p.y*g.y))/g.y;\n            const cursorPos = positionAtT(tempVec1,t,p,v,g);\n\n/*            console.log(cursorPos);\n            let cursorPosRaised = Object.assign(cursorPos);\n            cursorPosRaised.y += 1;\n            console.log(cursorPosRaised);\n\n            raycaster.setFromCamera(cursorPosRaised, camera);\n\n\n            const intersects = raycaster.intersectObjects(scene.children);\n            intersects.forEach(intersect => {\n                if(intersect.object.type !== 'Mesh')\n                    return;\n                console.log(intersect);\n                intersect.object.material.color.set(0xff0000);\n            });*/\n\n            // Offset\n            const offset = cursorPos.addScaledVector(feetPos ,-1);\n\n            // Do the locomotion\n            locomotion(offset);\n\n            // clean up\n            guidingController = null;\n            guideLight.intensity = 0;\n            this.remove(guideline);\n            scene.remove(guideSprite);\n        }\n    }\n\n    function handleMove({detail}) {\n        // Turn left\n        if (detail.value > 0) {\n            cameraGroup.rotation.y -= Math.PI/4;\n        }\n        // Turn right\n        if (detail.value < 0) {\n            cameraGroup.rotation.y += Math.PI/4;\n        }\n    }\n\n    function handleUp({detail}) {\n        if (detail.value < 0) {\n            onSelectStart.bind(detail.controller)();\n        }\n    }\n    function handleUpEnd({detail}) {\n        onSelectEnd.bind(detail.controller)();\n    }\n\n    const gamepad = require('./gamepad').get(renderer, rafCallbacks);\n\n    gamepad.addEventListener('axes0MoveMiddle', handleMove, true);\n    gamepad.addEventListener('axes2MoveMiddle', handleMove, true);\n\n    gamepad.addEventListener('axes1MoveMiddle', handleUp, true);\n    gamepad.addEventListener('axes3MoveMiddle', handleUp, true);\n    gamepad.addEventListener('axes1MoveEnd', handleUpEnd, true);\n    gamepad.addEventListener('axes3MoveEnd', handleUpEnd, true);\n\n    controller1.addEventListener('selectstart', onSelectStart);\n    controller1.addEventListener('selectend', onSelectEnd);\n    controller2.addEventListener('selectstart', onSelectStart);\n    controller2.addEventListener('selectend', onSelectEnd);\n\n    rafCallbacks.add(() => {\n        if (guidingController) {\n            // Controller start position\n            const p = guidingController.getWorldPosition(tempVecP);\n\n            // Set Vector V to the direction of the controller, at 1m/s\n            const v = guidingController.getWorldDirection(tempVecV);\n\n            // Scale the initial velocity to 6m/s\n            v.multiplyScalar(6);\n\n            // Time for tele ball to hit ground\n            const t = (-v.y  + Math.sqrt(v.y**2 - 2*p.y*g.y))/g.y;\n\n            const vertex = tempVec.set(0,0,0);\n            for (let i=1; i<=lineSegments; i++) {\n\n                // set vertex to current position of the virtual ball at time t\n                positionAtT(vertex,i*t/lineSegments,p,v,g);\n                guidingController.worldToLocal(vertex);\n                vertex.toArray(lineGeometryVertices,i*3);\n            }\n\n            guideline.geometry.attributes.position.needsUpdate = true;\n\n            // Place the light and sprite near the end of the line\n            positionAtT(guideLight.position,t*0.99,p,v,g);\n            positionAtT(guideSprite.position,t*0.99,p,v,g);\n        }\n    });\n\n};\n\n"],"names":["module","exports","camera","cameraGroup","offset","position","add","$1d5299d7bf9f6b49$export$3988ae62b71be9a3","renderer","rafCallbacks","prevGamePads","Map","gamepad","EventTarget","dispatchEvent","type","detail","specificEvent","CustomEvent","generalDetail","Object","assign","generalEvent","timestamp","frame","session","xr","getSession","i","source","inputSources","controller","getController","old","get","data","buttons","map","b","value","axes","slice","forEach","Math","abs","set","$3NNSQ","parcelRequire","$2e81c5a0f10917ae$export$da3cdac99155b982","static","button","document","createElement","disableButton","style","display","cursor","left","width","onmouseenter","onmouseleave","onclick","stylizeElement","element","bottom","padding","border","borderRadius","background","color","font","textAlign","opacity","outline","zIndex","navigator","id","isSessionSupported","then","supported","currentSession","async","onSessionStarted","addEventListener","onSessionEnded","setSession","textContent","removeEventListener","sessionInit","optionalFeatures","requestSession","end","showEnterVR","xrSessionIsGranted","click","catch","exception","console","warn","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","test","userAgent","registerSessionGrantedListener","config","$ilwiq","$7a8c3c23f3e49c64$export$a002182e51710d39","Handedness","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","$7a8c3c23f3e49c64$var$fetchJsonFile","path","response","fetch","ok","json","Error","statusText","$7a8c3c23f3e49c64$export$665d336fd546fbed","xrInputSource","basePath","defaultProfile","getAssetPath","supportedProfilesList","$7a8c3c23f3e49c64$export$cdc669b4504544b3","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","$7a8c3c23f3e49c64$var$defaultComponentValues","xAxis","yAxis","state","$7a8c3c23f3e49c64$var$VisualResponse","constructor","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","updateFromComponent","normalizedXAxis","normalizedYAxis","x","y","sqrt","theta","atan2","cos","sin","$7a8c3c23f3e49c64$var$normalizeAxes","includes","$7a8c3c23f3e49c64$var$Component","componentId","componentDescription","visualResponses","gamepadIndices","length","rootNodeName","touchPointNodeName","responseName","visualResponse","values","undefined","updateFromGamepad","gamepadButton","pressed","touched","$7a8c3c23f3e49c64$export$d04f314260fc930a","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push","$e7e1ee5465c2c699$var$XRControllerModel","Object3D","super","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","valueNode","minNode","maxNode","visible","quaternion","slerpQuaternions","lerpVectors","$e7e1ee5465c2c699$var$addAssetSceneToControllerModel","controllerModel","scene","touchPointNode","getObjectByName","sphereGeometry","SphereGeometry","MeshBasicMaterial","sphere","Mesh","$e7e1ee5465c2c699$var$findNodes","$1e39416a9737288d$var$_matrix","Matrix4","$1e39416a9737288d$var$_vector","Vector3","$1e39416a9737288d$export$31b2556b4cd059d","handModel","options","geometry","primitive","BoxGeometry","MeshStandardMaterial","handMesh","InstancedMesh","instanceMatrix","setUsage","DynamicDrawUsage","castShadow","receiveShadow","joints","updateMesh","count","joint","setScalar","jointRadius","compose","setMatrixAt","$7lx9d","$e32e5cb67549210a$export$bfa512d6162fb52e","bones","loader","GLTFLoader","setPath","load","gltf","object","children","mesh","getObjectByProperty","frustumCulled","jointName","bone","XRJoints","XRJoint","copy","$b600638a5ed0e434$var$XRHandModel","$cf7c6c3110abe81a$export$11e63f7b0f3d9900","$cf7c6c3110abe81a$var$controllerModelFactory","gltfLoader","_assetCache","createControllerModel","event","targetRayMode","cachedAsset","clone","asset","err","remove","$cf7c6c3110abe81a$var$handModelFactory","createHandModel","hand","controllers","index","controllerGrip","getControllerGrip","model","getHand","grip","controller1","controller2","hand1","hand2","$1856153a8b5b5cfe$export$11e63f7b0f3d9900","locomotion","g","tempVec","tempVec1","tempVecP","tempVecV","positionAtT","inVec","t","p","v","addScaledVector","lineGeometry","BufferGeometry","lineGeometryVertices","Float32Array","fill","lineGeometryColors","setAttribute","BufferAttribute","lineMaterial","LineBasicMaterial","vertexColors","blending","AdditiveBlending","guideline","Line","guideLight","PointLight","guideSpriteTexture","TextureLoader","guideSprite","PlaneGeometry","transparent","rotation","PI","guidingController","onSelectStart","e","log","intensity","Raycaster","onSelectEnd","feetPos","getCamera","getWorldPosition","getWorldDirection","multiplyScalar","handleMove","handleUp","bind","handleUpEnd","vertex","worldToLocal","toArray","attributes","$6Awmu","displayPainting","clearPaintings","$443da268708619f4$var$web3","$443da268708619f4$var$contract","$443da268708619f4$var$contractAddrReg","RegExp","$443da268708619f4$var$queryParams","Proxy","URLSearchParams","search","searchParams","prop","$443da268708619f4$var$listener","AudioListener","$443da268708619f4$var$gltfLoader","$443da268708619f4$var$scene","Scene","$443da268708619f4$var$camera","PerspectiveCamera","innerWidth","innerHeight","$443da268708619f4$var$cameraGroup","Group","$443da268708619f4$var$renderer","WebGLRenderer","antialias","$443da268708619f4$var$onWindowResize","aspect","updateProjectionMatrix","setSize","shadowMap","enabled","Color","init3d","Promise","resolve","reject","gallery","galleryPreset","$fZ8NE","findById","scale","z","fov","postRenderModifier","Set","sound","Audio","AudioLoader","buffer","setBuffer","setLoop","setVolume","play","stop","setAnimationLoop","time","cb","render","error","body","appendChild","domElement","createButton","loadGallery","alert","$parcel$interopDefault","eth","Contract","$33SoD","$hXJAl","show","galleryIndex","parseInt","methods","getGalleryIndex","call","paintings","getPaintings","promises","painting","$443da268708619f4$require$displayPainting","posX","posY","posZ","rotX","rotY","rotZ","textSize","url","allSettled","hide"],"version":3,"file":"gallery.a8442011.js.map"}